FORMAT: 1A
HOST: https://app.trayn.com/backend/rest

# Macro API 

# Group Template

**Plan Templates** are not assigned to a specific athlete and do not contain any date-related information. As soon as a template is assigned, all information from that template is transferred to the **Actual Plan** (see below) on the athlete.

## Templates [/s/macrocycle]
### List all plans [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "duration": 50
        }, {
          "id": 2, "duration": 26
        }]

### Create a new plan [POST]
+ Response 201

### Update properties of a plan [PUT]
+ Response 200 (application/json)

## Template [/s/macrocycle/{id}{?with}]
+ Parameters
    + id - ID of the template
    + with (optional) - list of entities to include, e.g. `config` or `value`
### Details for a specific plan [GET]
+ Response 200 (application/json)

        {
          "id": 1, "duration": 50
        }
        
### Delete a plan [DELETE]
Deletes a plan completely.
+ Response 204

## Template Configs [/s/macrocycle/{id}/config]
Defines how values are edited and presented. Load types are mapped to a unit or calculated volume. The following mappings are defined for an interval

- `SESSION`: number of sessions
- `HOUR`: total workout hours
- `UNIT_REFERENCE`: total weight moved, distance covered

+ Parameters
    + id - ID of the template
### List all configs for a plan [GET]
+ Response 200 (application/json)

        [{
          "id": "wlc1",
          "type": "TEXT",
          "name": "Performance and Testing"
        }, {
          "id": "wlc2",
          "type": "TEXT",
          "name": "Medical Measures"
        }]

### Create [POST]
+ Request Levels (application/json)

        {
          "id": "id-a",
          "type": "LEVELS",
          "name": "Competitions"
          "references": [{
            "id": "id-a"
          }]
        }

+ Request Generic Text (application/json)

        {
          "id": "id-a",
          "type": "TEXT",
          "name": "Training Camp"
          "references": [{
            "id": "id-a"
          }]
        }

+ Request Volume Intensity Graph (application/json)

        {
          "id": "id-a",
          "type": "LOAD",
          "name": "Volume and Intensity",
          "references": [{
              "id": "id-a1",
              "name": "Intensity",
              "type": "line"
            }, {
              "id": "id-a2",
              "name": "Volume",
              "type": "bar",
              "defaults": {
                "mapping": "SESSION",
                "max": 8
              }
            }, {
              "id": "id-a3",
              "name": "Performance",
              "type": "line"
            }
          ]
        }

+ Request Varied Intensity For Runners (application/json)

        {
          "id": "id-a",
          "type": "LOAD",
          "name": "Distance",
          "defaults": {
            "mapping": "HOUR",
            "max": 35
          },
          "references": [{
              "id": "id-a1",
              "name": "Sprint",
              "type": "bar"
            }, {
              "id": "id-a2",
              "name": "Long Intervals",
              "type": "bar"
            }, {
              "id": "id-a3",
              "name": "Endurance",
              "type": "bar"
            }
          ]
        }

+ Request Triathlon (application/json)

        {
          "id": "id-a",
          "type": "LOAD",
          "name": "Distance",
          "references": [{
              "id": "id-a1",
              "name": "Swim",
              "type": "line",
              "defaults": {
                "mapping": "DISTANCE",
                "unit": "km",
                "max": 30
              }
            }, {
              "id": "id-a2",
              "name": "Bicycle",
              "type": "line",
              "defaults": {
                "mapping": "DISTANCE",
                "unit": "km",
                "max": 1000
              }
            }, {
              "id": "id-a3",
              "name": "Run",
              "type": "line",
              "defaults": {
                "mapping": "DISTANCE",
                "unit": "km",
                "max": 120
              }
            }]
        }

+ Request Focus Reference (application/json)

        {
            "id": "id-a",
            "type": "FOCUS",
            "focus": "FOCUS_STRENGTH",
            "references": [
                {"id": "id-a1", "trainingArea": "ta21"},
                {"id": "id-a2", "trainingArea": "ta22"},
                {"id": "id-a3", "trainingArea": "ta23"}
            ]
        }

+ Response 200 (application/json)

## Template Config [/s/macrocycle/{id}/config/{cId}]
+ Parameters
    + id - ID of the template
    + cId - ID of the config object
### Read [GET]
+ Response 200 (application/json)

### Update [PUT]
+ Response 200 (application/json)

### Delete [DELETE]
+ Response 204

## Template Values [/s/macrocycle/{id}/values]
These are the actual contents of a plan. They refer to a plan and to a workload config.
+ Parameters
    + id - ID of the template
### List [GET]
+ Response 200 (application/json)

        [{
            "index": 0,
            "workload": {id: "wlc1"},
            "value": 0.1
        }, {
            "index": 0,
            "workload": {id: "wlc2"},
            "value": 0.4
        }, {
            "index": 0,
            "workload": {id: "wlc3"},
            "value": 2
        }, {
            "index": 2,
            "workload": {id: "wlc1"},
            "value": 0.25
        }, {
            "index": 2,
            "workload": {id: "wlc2"},
            "value": 0.3
        }, {
            "index": 2,
            "workload": {id: "wlc4"},
            "value": "Cardio Check"
        }]

### Create [PUT]
+ Response 200 (application/json)
        
## Template Value [/s/macrocycle/{id}/values/{vId}]
+ Parameters
    + id - ID of the template
    + vId - ID of the value
### Read [GET]
+ Response 200 (application/json)

### Update [PUT]
+ Response 200 (application/json)

### Delete [DELETE]
+ Response 204

## Plan Periods [/s/macrocycle/{id}/period]
+ Parameters
    + id - ID of the template
### List [GET]
Get a list of top-level plan periods. Periods are sorted by `start`.
+ Response 200 (application/json)

### Create [POST]
Create new top-level plan period.
+ Response 200

        {
          "name": "Preparation",
          "short": "Pre",
          "start": 87,
          "subs": [{
              name: "General preparation",
              short: "Preps",
              target: "General physical preparation"
          }]
        }

### Delete [DELETE]
Delete all plan periods for this macro template.
+ Response 204

## Plan Period Sets [/s/macrocycle/{id}/period/set]
+ Parameters
    + id - ID of the template
### Create [POST]
Create multiple plan periods
+ Response 200 (application/json)

        [
          {
            name: "Preparation",
            short: "Pre",
            …
          }, {
            name: "In Season",
            short: "Main",
            …
          }
        ]

## Plan Period [/s/macrocycle/{id}/period/{pId}]
+ Parameters
    + id - ID of the template
    + pId - ID of the period
### Read [GET]
+ Response 200 (application/json)

### Update [PUT]
+ Response 200 (application/json)

### Delete [DELETE]
+ Response 204


## Plan Sub Periods [/s/macrocycle/{id}/period/{pId}/subperiod]
+ Parameters
    + id - ID of the template
    + pId - ID of the period
### Read [GET]
+ Response 200 (application/json)

### Create [POST]
+ Response 201

## Plan Sub Period [/s/macrocycle/{id}/period/{pId}/subperiod/{sId}]
+ Parameters
    + id - ID of the template
    + pId - ID of the period
    + sId - ID of the sub period
### Read [GET]
+ Response 200 (application/json)

### Update [PUT]
+ Response 200 (application/json)

### Delete [DELETE]
+ Response 204


# Group Assigning Templates

When a template is assigned to an athlete, the contents of it is individualized and copied to the athletes plan (see below).
Values for workload configs that are specified as percent-values and are linked to a unit group can be individualized
by defining a maximum value (= 100%) and selecting a unit.
Existing data in the time range of the new assigned plan will be overwritten.

## Assign To Athlete [/s/athlete/{id}/macro/{tId}]
+ Parameters
    + id - id of athlete
    + tId - id of macro template

### Assign template [POST]

+ Request (application/json)

        {
            "date": "2015-11-25",
            "workloadAdaption": [
                {
                    "group": "LOAD_DISTANCE",
                    "unit": "km",
                    "max": 150
                },
                {
                    "group": "LOAD_WORKOUTS",
                    "unit": "#",
                    "max": 8
                }
            ]
        }

+ Response 201 (application/json)


# Group Actual Plan

**Actual Plans** are a not-necessarily continuous set of workload configs and values associated with the assignee of a plan. The association between the actual plan and its template is informative only and used to decide whether an update to a template should be transitively written to an actual plan.

## Macro Plan [/s/athlete/{id}/macro/{?start,end}]
+ Parameters
    + id - athlete id
    + start (Date) - start date
    + end (Date) - end date

### List all workloads [GET]
+ Response 200 (application/json)

        {
            "config": [
                {
                  "id": "awlc1",
                  "group": "LOAD_DISTANCE",
                  "name": "Medium Intensity",
                  "type": "PERCENT",
                  "visualization": "bar",
                  "unit": "km",
                  "date": "2015-10-14"
                }, {
                  "id": "awlc2",
                  "group": "LOAD_DISTANCE",
                  "name": "Low Intensity",
                  "type": "PERCENT",
                  "visualization": "bar",
                  "unit": "km",
                  "date": "2015-10-14"
                }
            ],
            "values": [
                {
                    "id": "v1",
                    "date": "2015-11-27",
                    "workload": {"id": "awlc1"},
                    "value": 30
                }, {
                    "id": "v2",
                    "date": "2015-11-27",
                    "workload": {"id": "awlc2"},
                    "value": 120
                }
            ]
        }

### Create new workload [POST]
+ Request (application/json)

        {
            "date": "2015-11-25",
            "workload": {"id": "awlc1"},
            "value": 18
        }
        
+ Response 201

# Group Planning Model
The planning model is used to initialize plan period and sub-periods in a macrocycle. References between the planning periods used in the macrocycle and the configuration from the planning model are not required.

## Planning Models [/s/planmodel]
### List [GET]
+ Response 200 (application/json)
### Create [POST]
+ Response 200 (application/json)

## Planning Model [/s/planmodel/{id}]
+ Parameters
    + id - ID of the planning model
### Read [GET]
+ Response 200 (application/json)
### Update [PUT]
+ Response 200 (application/json)
### Delete [DELETE]
+ Response 204

## Periods [/s/planmodel/{id}/period]
### List [GET]
+ Response 200 (application/json)
### Create [POST]
+ Response 200 (application/json)
## Period [/s/planmodel/{id}/period/{pId}]
### Read [GET]
+ Response 200 (application/json)
### Update [PUT]
+ Response 200 (application/json)
### Delete [DELETE]
+ Response 204

## Sub Periods [/s/planmodel/{id}/period/{pId}/subperiod]
### List [GET]
+ Response 200 (application/json)
### Create [POST]
+ Response 200 (application/json)
## Sub Period [/s/planmodel/{id}/period/{pId}/subperiod/{sId}]
### Read [GET]
+ Response 200 (application/json)
### Update [PUT]
+ Response 200 (application/json)
### Delete [DELETE]
+ Response 204